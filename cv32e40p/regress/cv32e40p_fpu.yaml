#  
# Copyright 2023 Dolphin Design
# SPDX-License-Identifier: Apache-2.0 WITH SHL-2.1
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# example yaml file for fpu test regression
name: cv32e40p_fpu
description: Example yaml file template for fpu regression run

builds:
  corev-dv:
    # required: Make the corev-dv infrastructure    
    cmd: make comp_corev-dv
    iss: no
    dir: cv32e40p/sim/uvmt
    cov: 0
    cfg: pulp_fpu
  uvmt_cv32e40p:
    # required: the make command to create the build
    cmd: make comp
    iss: no
    dir: cv32e40p/sim/uvmt
    cov: 0
    cfg: pulp_fpu

# List of tests
tests:
  corev_sanity_fp_instr_test:
    build: uvmt_cv32e40p
    description: fp instruction sanity test
    cmd: make gen_corev-dv test TEST=corev_sanity_fp_instr_test
    iss: no
    dir: cv32e40p/sim/uvmt
    cov: 0
    num: 1

  corev_fp_instr_test_for_regr:
    build: uvmt_cv32e40p
    description: fp instruction regression test. use test_override_fp_instr_stream to refine which stream class to be exercise [range 1..4]
    cmd: make gen_corev-dv test TEST=corev_fp_instr_test_for_regr CFG_PLUSARGS="+test_override_fp_instr_stream=1"
    iss: no
    dir: cv32e40p/sim/uvmt
    cov: 0
    num: 1

# Notes:
# 1) tests-<testname>-cfg argument is propageted from builds-uvmt_cv32e40p-cfg
# 2) arguments such as <dir, iss, and cov> must defined explicitely in <rtl, tb and test> and MUST hold with same setting
# 3) generate the run script with following cmd execution under bin path
# %python3 cv_regress --file=cv32e40p_fpu.yaml --simulator=vsim --sh --outfile=run.sh
